{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      login: false,\n      user: null,\n      // get value from search input field\n      query: \"\"\n    };\n  },\n  computed: {\n    unreadNotifications() {\n      return store.getters.getUnreadNotifications;\n    }\n  },\n  methods: {\n    doSearch: async function () {\n      // create form data object and add searched query in it\n      const formData = new FormData();\n      formData.append(\"query\", this.query);\n\n      // call an AJAX to the server\n      const response = await axios.post(this.$apiURL + \"/search\",\n      // send the form data object with the request\n      formData,\n      // pass headers that contains access token\n      // so the server will know which user's contact to search\n      {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        // set the contacts array to the one received from API\n        store.commit(\"setContacts\", response.data.contacts);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n    doLogout: async function () {\n      const response = await axios.post(this.$apiURL + \"/logout\", null, {\n        headers: this.$headers\n      });\n      localStorage.removeItem(this.$accessTokenKey);\n      this.$router.push({\n        path: \"/login\"\n      });\n    },\n    getUser: async function () {\n      const self = this;\n\n      // check if user is logged in\n      if (localStorage.getItem(this.$accessTokenKey)) {\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\n          headers: this.$headers\n        });\n        if (response.data.status == \"success\") {\n          // user is logged in\n          this.$user = response.data.user;\n          store.commit(\"setUser\", response.data.user);\n          store.commit(\"setUnreadNotifications\", response.data.unreadNotifications);\n          store.commit(\"setNotifications\", response.data.user.notifications);\n          if (typeof socketIO !== \"undefined\") {\n            socketIO.emit(\"connected\", this.$user.email);\n            socketIO.on(\"sendMessage\", async function (data) {\n              if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n                store.commit(\"appendMessage\", data.data);\n              }\n              let tempContacts = self.$user.contacts;\n              for (let a = 0; a < tempContacts.length; a++) {\n                if (tempContacts[a]._id == data.data.sender._id) {\n                  tempContacts[a].unreadMessages++;\n                }\n              }\n              store.commit(\"setContacts\", tempContacts);\n              const Toast = swal.mixin({\n                toast: true,\n                position: \"bottom-right\",\n                customClass: {\n                  popup: \"colored-toast\"\n                },\n                showConfirmButton: false,\n                timer: 10000,\n                timerProgressBar: true\n              });\n              await Toast.fire({\n                title: data.title\n              });\n            });\n          }\n        } else {\n          // user is logged out\n          localStorage.removeItem(this.$accessTokenKey);\n        }\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\n      } else {\n        this.login = false;\n      }\n      global.user = this.user;\n    }\n  },\n  computed: {\n    user() {\n      return store.getters.getUser;\n    }\n  },\n  mounted: function () {\n    this.getUser();\n    global.socketIO = io(this.$apiURL);\n  }\n};","map":{"version":3,"names":["data","login","user","query","computed","unreadNotifications","store","getters","getUnreadNotifications","methods","doSearch","formData","FormData","append","response","axios","post","$apiURL","headers","$headers","status","commit","contacts","swal","fire","message","doLogout","localStorage","removeItem","$accessTokenKey","$router","push","path","getUser","self","getItem","$user","notifications","socketIO","emit","email","on","$route","sender","tempContacts","a","length","_id","unreadMessages","Toast","mixin","toast","position","customClass","popup","showConfirmButton","timer","timerProgressBar","title","global","mounted","io"],"sources":["D:\\Laptrinh\\Phat_trien_ung_dung_web\\Projects\\Web-Chat\\CT449-WebChat-MEVN-FrontEnd-BuiLeNhutHao-B1910370\\src\\components\\layouts\\AppHeader.vue"],"sourcesContent":["<template>\r\n  <nav\r\n    class=\"navbar navbar-expand-lg navbar-dark bg-info\"\r\n    style=\"margin-bottom: 50px\"\r\n  >\r\n    <div class=\"container-fluid\">\r\n      <router-link class=\"navbar-brand\" to=\"/\"> Chat Chit </router-link>\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"collapse\"\r\n        data-bs-target=\"#navbarColor01\"\r\n        aria-controls=\"navbarColor01\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n        <ul class=\"nav navbar-nav me-auto\">\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link active\" to=\"/\">\r\n              Home<span class=\"visually-hidden\">( current) </span>\r\n            </router-link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link\" to=\"/login\">Login</router-link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link\" to=\"/register\">Register</router-link>\r\n          </li>\r\n          <li class=\"nav-item dropdown\">\r\n            <a\r\n              class=\"nav-link dropdown-toggle\"\r\n              href=\"#\"\r\n              id=\"navbarDropdown\"\r\n              role=\"button\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            ></a>\r\n            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li>\r\n                <a class=\"dropdown-item\" href=\"javascript:void(0);\">Logout</a>\r\n              </li>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <form action=\"\" class=\"d-flex\">\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control me-sm-2\"\r\n            v-model=\"query\"\r\n            placeholder=\"Search\"\r\n          />\r\n          <button class=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      login: false,\r\n      user: null,\r\n\r\n      // get value from search input field\r\n      query: \"\",\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    unreadNotifications() {\r\n      return store.getters.getUnreadNotifications;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    doSearch: async function () {\r\n      // create form data object and add searched query in it\r\n      const formData = new FormData();\r\n      formData.append(\"query\", this.query);\r\n\r\n      // call an AJAX to the server\r\n      const response = await axios.post(\r\n        this.$apiURL + \"/search\",\r\n\r\n        // send the form data object with the request\r\n        formData,\r\n\r\n        // pass headers that contains access token\r\n        // so the server will know which user's contact to search\r\n        {\r\n          headers: this.$headers,\r\n        }\r\n      );\r\n\r\n      if (response.data.status == \"success\") {\r\n        // set the contacts array to the one received from API\r\n        store.commit(\"setContacts\", response.data.contacts);\r\n      } else {\r\n        swal.fire(\"Error\", response.data.message, \"error\");\r\n      }\r\n    },\r\n\r\n    doLogout: async function () {\r\n      const response = await axios.post(this.$apiURL + \"/logout\", null, {\r\n        headers: this.$headers,\r\n      });\r\n\r\n      localStorage.removeItem(this.$accessTokenKey);\r\n\r\n      this.$router.push({\r\n        path: \"/login\",\r\n      });\r\n    },\r\n\r\n    getUser: async function () {\r\n      const self = this;\r\n\r\n      // check if user is logged in\r\n      if (localStorage.getItem(this.$accessTokenKey)) {\r\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\r\n          headers: this.$headers,\r\n        });\r\n\r\n        if (response.data.status == \"success\") {\r\n          // user is logged in\r\n          this.$user = response.data.user;\r\n\r\n          store.commit(\"setUser\", response.data.user);\r\n          store.commit(\r\n            \"setUnreadNotifications\",\r\n            response.data.unreadNotifications\r\n          );\r\n          store.commit(\"setNotifications\", response.data.user.notifications);\r\n\r\n          if (typeof socketIO !== \"undefined\") {\r\n            socketIO.emit(\"connected\", this.$user.email);\r\n\r\n            socketIO.on(\"sendMessage\", async function (data) {\r\n              if (self.$route.path == \"/chat/\" + data.data.sender.email) {\r\n                store.commit(\"appendMessage\", data.data);\r\n              }\r\n\r\n              let tempContacts = self.$user.contacts;\r\n              for (let a = 0; a < tempContacts.length; a++) {\r\n                if (tempContacts[a]._id == data.data.sender._id) {\r\n                  tempContacts[a].unreadMessages++;\r\n                }\r\n              }\r\n              store.commit(\"setContacts\", tempContacts);\r\n\r\n              const Toast = swal.mixin({\r\n                toast: true,\r\n                position: \"bottom-right\",\r\n                customClass: {\r\n                  popup: \"colored-toast\",\r\n                },\r\n                showConfirmButton: false,\r\n                timer: 10000,\r\n                timerProgressBar: true,\r\n              });\r\n\r\n              await Toast.fire({\r\n                title: data.title,\r\n              });\r\n            });\r\n          }\r\n        } else {\r\n          // user is logged out\r\n          localStorage.removeItem(this.$accessTokenKey);\r\n        }\r\n\r\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\r\n      } else {\r\n        this.login = false;\r\n      }\r\n\r\n      global.user = this.user;\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    user() {\r\n      return store.getters.getUser;\r\n    },\r\n  },\r\n\r\n  mounted: function () {\r\n    this.getUser();\r\n\r\n    global.socketIO = io(this.$apiURL);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}