{"ast":null,"code":"export default {\n  data() {\n    return {\n      login: false,\n      user: null\n    };\n  },\n  methods: {\n    getUser: async function () {\n      const self = this;\n\n      // check if user is logged in\n      if (localStorage.getItem(this.$accessTokenKey)) {\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\n          headers: this.$headers\n        });\n        if (response.data.status == \"success\") {\n          // user is logged in\n          this.$user = response.data.user;\n          store.commit(\"setUser\", response.data.user);\n          store.commit(\"setUnreadNotifications\", response.data.unreadNotifications);\n          store.commit(\"setNotifications\", response.data.user.notifications);\n          if (typeof socketIO !== \"undefined\") {\n            socketIO.emit(\"connected\", this.$user.email);\n            socketIO.on(\"sendMessage\", async function (data) {\n              if (self.$route.path == \"/chat/\" + data.data.sender.email) {\n                store.commit(\"appendMessage\", data.data);\n              }\n              let tempContacts = self.$user.contacts;\n              for (let a = 0; a < tempContacts.length; a++) {\n                if (tempContacts[a]._id == data.data.sender._id) {\n                  tempContacts[a].unreadMessages++;\n                }\n              }\n              store.commit(\"setContacts\", tempContacts);\n              const Toast = swal.mixin({\n                toast: true,\n                position: \"bottom-right\",\n                customClass: {\n                  popup: \"colored-toast\"\n                },\n                showConfirmButton: false,\n                timer: 10000,\n                timerProgressBar: true\n              });\n              await Toast.fire({\n                title: data.title\n              });\n            });\n          }\n        } else {\n          // user is logged out\n          localStorage.removeItem(this.$accessTokenKey);\n        }\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\n      } else {\n        this.login = false;\n      }\n      global.user = this.user;\n    }\n  },\n  computed: {\n    user() {\n      return store.getters.getUser;\n    }\n  },\n  mounted: function () {\n    this.getUser();\n    global.socketIO = io(this.$apiURL);\n  }\n};","map":{"version":3,"names":["data","login","user","methods","getUser","self","localStorage","getItem","$accessTokenKey","response","axios","post","$apiURL","headers","$headers","status","$user","store","commit","unreadNotifications","notifications","socketIO","emit","email","on","$route","path","sender","tempContacts","contacts","a","length","_id","unreadMessages","Toast","swal","mixin","toast","position","customClass","popup","showConfirmButton","timer","timerProgressBar","fire","title","removeItem","global","computed","getters","mounted","io"],"sources":["D:\\Laptrinh\\Phat_trien_ung_dung_web\\Projects\\Web-Chat\\CT449-WebChat-MEVN-FrontEnd-BuiLeNhutHao-B1910370\\src\\components\\layouts\\AppHeader.vue"],"sourcesContent":["<template>\r\n  <nav\r\n    class=\"navbar navbar-expand-lg navbar-dark bg-info\"\r\n    style=\"margin-bottom: 50px\"\r\n  >\r\n    <div class=\"container-fluid\">\r\n      <router-link class=\"navbar-brand\" to=\"/\"> Chat Chit </router-link>\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"collapse\"\r\n        data-bs-target=\"#navbarColor01\"\r\n        aria-controls=\"navbarColor01\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n        <ul class=\"nav navbar-nav me-auto\">\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link active\" to=\"/\">\r\n              Home<span class=\"visually-hidden\">( current) </span>\r\n            </router-link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link\" to=\"/login\">Login</router-link>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <router-link class=\"nav-link\" to=\"/register\">Register</router-link>\r\n          </li>\r\n          <li class=\"nav-item dropdown\">\r\n            <a\r\n              class=\"nav-link dropdown-toggle\"\r\n              href=\"#\"\r\n              id=\"navbarDropdown\"\r\n              role=\"button\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            ></a>\r\n            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li>\r\n                <a class=\"dropdown-item\" href=\"javascript:void(0);\">Logout</a>\r\n              </li>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <form action=\"\" class=\"d-flex\">\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control me-sm-2\"\r\n            v-model=\"query\"\r\n            placeholder=\"Search\"\r\n          />\r\n          <button class=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      login: false,\r\n      user: null,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    getUser: async function () {\r\n      const self = this;\r\n\r\n      // check if user is logged in\r\n      if (localStorage.getItem(this.$accessTokenKey)) {\r\n        const response = await axios.post(this.$apiURL + \"/getUser\", null, {\r\n          headers: this.$headers,\r\n        });\r\n\r\n        if (response.data.status == \"success\") {\r\n          // user is logged in\r\n          this.$user = response.data.user;\r\n\r\n          store.commit(\"setUser\", response.data.user);\r\n          store.commit(\r\n            \"setUnreadNotifications\",\r\n            response.data.unreadNotifications\r\n          );\r\n          store.commit(\"setNotifications\", response.data.user.notifications);\r\n\r\n          if (typeof socketIO !== \"undefined\") {\r\n            socketIO.emit(\"connected\", this.$user.email);\r\n\r\n            socketIO.on(\"sendMessage\", async function (data) {\r\n              if (self.$route.path == \"/chat/\" + data.data.sender.email) {\r\n                store.commit(\"appendMessage\", data.data);\r\n              }\r\n\r\n              let tempContacts = self.$user.contacts;\r\n              for (let a = 0; a < tempContacts.length; a++) {\r\n                if (tempContacts[a]._id == data.data.sender._id) {\r\n                  tempContacts[a].unreadMessages++;\r\n                }\r\n              }\r\n              store.commit(\"setContacts\", tempContacts);\r\n\r\n              const Toast = swal.mixin({\r\n                toast: true,\r\n                position: \"bottom-right\",\r\n                customClass: {\r\n                  popup: \"colored-toast\",\r\n                },\r\n                showConfirmButton: false,\r\n                timer: 10000,\r\n                timerProgressBar: true,\r\n              });\r\n\r\n              await Toast.fire({\r\n                title: data.title,\r\n              });\r\n            });\r\n          }\r\n        } else {\r\n          // user is logged out\r\n          localStorage.removeItem(this.$accessTokenKey);\r\n        }\r\n\r\n        this.login = localStorage.getItem(this.$accessTokenKey) != null;\r\n      } else {\r\n        this.login = false;\r\n      }\r\n\r\n      global.user = this.user;\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    user() {\r\n      return store.getters.getUser;\r\n    },\r\n  },\r\n\r\n  mounted: function () {\r\n    this.getUser();\r\n\r\n    global.socketIO = io(this.$apiURL);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}