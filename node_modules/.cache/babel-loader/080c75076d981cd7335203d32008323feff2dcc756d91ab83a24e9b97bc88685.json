{"ast":null,"code":"import axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"../vuex/store\";\nexport default {\n  date() {\n    return {\n      isDeleting: false\n    };\n  },\n  methods: {\n    markAsRead: async function () {\n      const response = await axios.post(this.$apiURL + \"/markNotificationsAsRead\", null, {\n        headers: this.$headers\n      });\n      if (response.data.status == \"success\") {\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          tempNotifications[a].isRead = true;\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n        store.commit(\"setUnreadNotifications\", 0);\n      }\n    },\n    deleteNotification: async function () {\n      const form = event.target;\n      const _id = form._id.value;\n      const formData = new FormData(form);\n      this.isDeleting = true;\n      const response = await axios.post(this.$apiURL + \"/deleteNotification\", formData, {\n        headers: this.$headers\n      });\n      this.isDeleting = false;\n      if (response.data.status == \"success\") {\n        // remove from local array\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          if (tempNotifications[a]._id == _id) {\n            tempNotifications.splice(a, 1);\n            break;\n          }\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    }\n  },\n  mounted: function () {\n    this.markAsRead();\n  },\n  computed: {\n    notifications() {\n      return store.getters.getNotifications.reverse();\n    }\n  }\n};","map":{"version":3,"names":["axios","swal","store","date","isDeleting","methods","markAsRead","response","post","$apiURL","headers","$headers","data","status","tempNotifications","getters","getNotifications","a","length","isRead","commit","deleteNotification","form","event","target","_id","value","formData","FormData","splice","fire","message","mounted","computed","notifications","reverse"],"sources":["D:\\Laptrinh\\Phat_trien_ung_dung_web\\Projects\\Web-Chat\\CT449-WebChat-MEVN-FrontEnd-BuiLeNhutHao-B1910370\\src\\components\\NotificationsComponent.vue"],"sourcesContent":["<template>\n  <div class=\"container\" style=\"margin-top: 50px\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h1 class=\"text-center\">Notifications</h1>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <table class=\"table table-hover\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr\n              v-for=\"notification in notifications\"\n              v-bind:key=\"notification._id\"\n            >\n              <td>\n                <span v-text=\"notification.type\"></span>&nbsp;\n\n                <template v-if=\"notification.type == 'group_invite'\">\n                  <span v-text=\"notification.group.name\"></span>\n                </template>\n              </td>\n\n              <td style=\"display: flex\">\n                <form v-on:submit.prevent=\"deleteNotification\">\n                  <input\n                    type=\"hidden\"\n                    name=\"_id\"\n                    v-bind:value=\"notification._id\"\n                    required\n                  />\n                  <input\n                    type=\"submit\"\n                    v-bind:value=\"isDeleting ? 'Deleting...' : 'Delete'\"\n                    v-bind:isDeleting=\"disabled\"\n                    class=\"btn btn-danger\"\n                  />\n                </form>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport swal from \"sweetalert2\";\nimport store from \"../vuex/store\";\n\nexport default {\n  date() {\n    return {\n      isDeleting: false,\n    };\n  },\n\n  methods: {\n    markAsRead: async function () {\n      const response = await axios.post(\n        this.$apiURL + \"/markNotificationsAsRead\",\n        null,\n        {\n          headers: this.$headers,\n        }\n      );\n\n      if (response.data.status == \"success\") {\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          tempNotifications[a].isRead = true;\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n\n        store.commit(\"setUnreadNotifications\", 0);\n      }\n    },\n\n    deleteNotification: async function () {\n      const form = event.target;\n      const _id = form._id.value;\n      const formData = new FormData(form);\n\n      this.isDeleting = true;\n\n      const response = await axios.post(\n        this.$apiURL + \"/deleteNotification\",\n        formData,\n        {\n          headers: this.$headers,\n        }\n      );\n      this.isDeleting = false;\n\n      if (response.data.status == \"success\") {\n        // remove from local array\n        const tempNotifications = store.getters.getNotifications;\n        for (let a = 0; a < tempNotifications.length; a++) {\n          if (tempNotifications[a]._id == _id) {\n            tempNotifications.splice(a, 1);\n            break;\n          }\n        }\n        store.commit(\"setNotifications\", tempNotifications);\n      } else {\n        swal.fire(\"Error\", response.data.message, \"error\");\n      }\n    },\n  },\n\n  mounted: function () {\n    this.markAsRead();\n  },\n\n  computed: {\n    notifications() {\n      return store.getters.getNotifications.reverse();\n    },\n  },\n};\n</script>\n"],"mappings":"AAwDA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,IAAG,MAAO,aAAa;AAC9B,OAAOC,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACPC,UAAU,EAAE,eAAAA,CAAA,EAAkB;MAC5B,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAI,CAC/B,IAAI,CAACC,OAAM,GAAI,0BAA0B,EACzC,IAAI,EACJ;QACEC,OAAO,EAAE,IAAI,CAACC;MAChB,EACD;MAED,IAAIJ,QAAQ,CAACK,IAAI,CAACC,MAAK,IAAK,SAAS,EAAE;QACrC,MAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAO,CAACC,gBAAgB;QACxD,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,iBAAiB,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACjDH,iBAAiB,CAACG,CAAC,CAAC,CAACE,MAAK,GAAI,IAAI;QACpC;QACAjB,KAAK,CAACkB,MAAM,CAAC,kBAAkB,EAAEN,iBAAiB,CAAC;QAEnDZ,KAAK,CAACkB,MAAM,CAAC,wBAAwB,EAAE,CAAC,CAAC;MAC3C;IACF,CAAC;IAEDC,kBAAkB,EAAE,eAAAA,CAAA,EAAkB;MACpC,MAAMC,IAAG,GAAIC,KAAK,CAACC,MAAM;MACzB,MAAMC,GAAE,GAAIH,IAAI,CAACG,GAAG,CAACC,KAAK;MAC1B,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAACN,IAAI,CAAC;MAEnC,IAAI,CAAClB,UAAS,GAAI,IAAI;MAEtB,MAAMG,QAAO,GAAI,MAAMP,KAAK,CAACQ,IAAI,CAC/B,IAAI,CAACC,OAAM,GAAI,qBAAqB,EACpCkB,QAAQ,EACR;QACEjB,OAAO,EAAE,IAAI,CAACC;MAChB,EACD;MACD,IAAI,CAACP,UAAS,GAAI,KAAK;MAEvB,IAAIG,QAAQ,CAACK,IAAI,CAACC,MAAK,IAAK,SAAS,EAAE;QACrC;QACA,MAAMC,iBAAgB,GAAIZ,KAAK,CAACa,OAAO,CAACC,gBAAgB;QACxD,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,iBAAiB,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACjD,IAAIH,iBAAiB,CAACG,CAAC,CAAC,CAACQ,GAAE,IAAKA,GAAG,EAAE;YACnCX,iBAAiB,CAACe,MAAM,CAACZ,CAAC,EAAE,CAAC,CAAC;YAC9B;UACF;QACF;QACAf,KAAK,CAACkB,MAAM,CAAC,kBAAkB,EAAEN,iBAAiB,CAAC;MACrD,OAAO;QACLb,IAAI,CAAC6B,IAAI,CAAC,OAAO,EAAEvB,QAAQ,CAACK,IAAI,CAACmB,OAAO,EAAE,OAAO,CAAC;MACpD;IACF;EACF,CAAC;EAEDC,OAAO,EAAE,SAAAA,CAAA,EAAY;IACnB,IAAI,CAAC1B,UAAU,EAAE;EACnB,CAAC;EAED2B,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAOhC,KAAK,CAACa,OAAO,CAACC,gBAAgB,CAACmB,OAAO,EAAE;IACjD;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}